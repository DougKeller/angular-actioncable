var ngActionCable=angular.module("ngActionCable",["ngWebSocket"]);ngActionCable.factory("SocketWrangler",["Websocket",function(Websocket){var intervalTime=8647,websocket=Websocket,_live=!1,_connecting=!1,connectNow=function(){websocket.attempt_restart()},startInterval=function(){_connecting=_connecting||setInterval(function(){connectNow()},intervalTime)},stopInterval=function(){clearInterval(_connecting),_connecting=!1};websocket.on_connection_close_callback=function(){_live&&startInterval(),console.log("close callback")},websocket.on_connection_open_callback=function(){stopInterval(),console.log("open callback")};var methods={connected:function(){return _live&&!_connecting},connecting:function(){return _live&&!!_connecting},disconnected:function(){return!_live},start:function(){console.info("Live STARTED"),_live=!0,startInterval(),connectNow()},stop:function(){console.info("Live stopped"),_live=!1,stopInterval(),websocket.close()}};return methods}]),ngActionCable.factory("Websocket",["$websocket","WebsocketController","WebsocketConfig",function($websocket,WebsocketController,WebsocketConfig){var methods,wsUrl=WebsocketConfig.wsUri,controller=WebsocketController,dataStream=null,connected=!1,currentChannels=[],close_connection=function(){dataStream&&(dataStream.close({force:!0}),dataStream=null,connected=!1)},subscribe_to=function(channel,data){"undefined"==typeof data&&(data="N/A"),console.log("-> subscribing to: "+channel),new_data_stream().send(JSON.stringify({command:"subscribe",identifier:JSON.stringify({channel:channel,data:data})}))},unsubscribe_from=function(channel,data){"undefined"==typeof data&&(data="N/A"),console.log("<- unsubscribing from: "+channel),new_data_stream().send(JSON.stringify({command:"unsubscribe",identifier:JSON.stringify({channel:channel,data:data})}))},send_to=function(channel,data,message,action){"undefined"==typeof data&&(data="N/A"),console.log("=> sending to: "+channel),new_data_stream().send(JSON.stringify({command:"message",identifier:JSON.stringify({channel:channel,data:data}),data:JSON.stringify({message:message,action:action})}))},new_data_stream=function(){return null==dataStream&&(dataStream=$websocket(wsUrl),dataStream.onClose(function(arg){close_connection(),connected=!1,methods.on_connection_close_callback()}),dataStream.onOpen(function(arg){connected=!0,currentChannels.forEach(function(channel){subscribe_to(channel.name,channel.data)}),methods.on_connection_open_callback()}),dataStream.onMessage(function(message){controller.post(JSON.parse(message.data))})),dataStream};return methods={connected:function(){return connected},attempt_restart:function(){return close_connection(),new_data_stream(),!0},currentChannels:currentChannels,close:function(){return close_connection()},on_connection_close_callback:function(){},on_connection_open_callback:function(){},subscribe:function(channel,data){currentChannels.push({name:channel,data:data}),this.connected()&&subscribe_to(channel,data)},unsubscribe:function(channel,data){for(var i=0;i<currentChannels.length;i++)currentChannels[i].name===channel&&currentChannels.splice(i,1);this.connected()&&unsubscribe_from(channel,data)},send:function(channel,data,message,action){console.log("send requested"),this.connected()&&send_to(channel,data,message,action)}}}]),ngActionCable.factory("WebsocketChannel",["WebsocketController","Websocket",function(WebsocketController,Websocket){return function(channelName,channelParams){this._websocketControllerActions=function(){var _channelParamsString=JSON.stringify(this.channelParams);return WebsocketController.actions[this.channelName]=WebsocketController.actions[this.channelName]||{},WebsocketController.actions[this.channelName][_channelParamsString]=WebsocketController.actions[this.channelName][_channelParamsString]||[],WebsocketController.actions[this.channelName][_channelParamsString]},this._subscriptionCount=function(){return this.callbacks.length},this.channelName=channelName,this.channelParams=channelParams||{},this.onMessageCallback=null,this.callbacks=this._websocketControllerActions(),this.subscribe=function(cb){0===this._subscriptionCount()&&Websocket.subscribe(this.channelName,this.channelParams),this._addMessageCallback(cb)},this.unsubscribe=function(){this._removeMessageCallback(),0===this._subscriptionCount()&&Websocket.unsubscribe(this.channelName,this.channelParams)},this.send=function(message,action){Websocket.send(this.channelName,this.channelParams,message,action)},this._addMessageCallback=function(cb){this.onMessageCallback=cb,this.callbacks.push(this.onMessageCallback)},this._removeMessageCallback=function(){for(var i=0;i<this.callbacks.length;i++)if(this.callbacks[i]===this.onMessageCallback)return this.callbacks.splice(i,1),this.onMessageCallback=null,!0;throw console.log("Callbacks:"),console.log(this.callbacks),console.log("onMessageCallback:"),console.log(this.onMessageCallback),"can't find onMessageCallback in callbacks array to remove"}}}]),ngActionCable.value("WebsocketConfig",{autoStart:!0,wsUri:angular.element("meta[name='action-cable-url']").attr("content")||"",debug:!1}),ngActionCable.factory("WebsocketController",function(){function findActionCallbacksForChannel(channelName,params){return actions[channelName]&&actions[channelName][params]}function channel_from(message){return message&&message.identifier?JSON.parse(message.identifier).channel:void 0}function params_from(message){var paramsData=JSON.parse(message.identifier).data;return JSON.stringify(paramsData)}var actions={welcome:function(message){},ping:function(message){},confirm_subscription:function(message){},ws_404:function(message){}},routeToActions=function(actionCallbacks,message){angular.forEach(actionCallbacks,function(func,id){func.apply(null,[message])})},route=function(message){if(actions[message.type])actions[message.type](message);else if(findActionCallbacksForChannel(channel_from(message),params_from(message))){var actionCallbacks=findActionCallbacksForChannel(channel_from(message),params_from(message));routeToActions(actionCallbacks,message.message)}else actions.ws_404(message)},methods={post:function(message){return route(message)},actions:actions};return methods});